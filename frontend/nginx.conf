# /etc/nginx/conf.d/default.conf

# Mapea el header de Upgrade para WebSockets/SSE
map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

# Define el upstream del backend (ajusta según tu despliegue)
upstream backend_app {
    # Si backend está en el mismo host:
    server backend:3501;

    # Si usas Docker y el servicio se llama "backend", usa:
    # server backend:3000;

    keepalive 64;
}

server {
    listen 80 default_server;
    server_name localhost _;

    # Directorio donde está el build de React (index.html y assets)
    root /usr/share/nginx/html;
    index index.html;

    # SPA: sirve archivos estáticos y hace fallback a index.html
    location / {
        try_files $uri $uri/ /index.html;
    }

    # Proxy al backend de Rust
    location /run {
        # SIN / al final: /run/usuarios -> /run/usuarios en el backend
        proxy_pass http://backend_app;

        proxy_http_version 1.1;

        # Encabezados
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # WebSocket / SSE
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
    }

    # Cache agresiva para assets estáticos versionados
    location ~* \.(?:js|mjs|css|png|jpg|jpeg|gif|svg|ico|webp|woff2?)$ {
        expires 7d;
        add_header Cache-Control "public, max-age=604800, immutable";
        try_files $uri =404;
    }

    # Evita cachear el HTML principal (para despliegues sin romper SPA)
    location = /index.html {
        add_header Cache-Control "no-store";
    }

    # Páginas de error
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }
}
